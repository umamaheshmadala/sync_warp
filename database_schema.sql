-- SynC Database Schema
-- This file contains all table definitions, RLS policies, and triggers for the SynC platform

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "postgis";

-- Create custom types
CREATE TYPE user_role AS ENUM ('customer', 'business_owner', 'admin');
CREATE TYPE business_status AS ENUM ('active', 'inactive', 'blocked', 'pending');
CREATE TYPE coupon_status AS ENUM ('not_issued', 'issued', 'not_collected', 'collected', 'expired');
CREATE TYPE ad_type AS ENUM ('banner', 'search_rank', 'trending', 'carousel');
CREATE TYPE ad_status AS ENUM ('pending', 'approved', 'rejected', 'active', 'ended');
CREATE TYPE notification_type AS ENUM ('storefront', 'product', 'wallet', 'feed', 'profile', 'system');

-- =============================================
-- CORE USER TABLES
-- =============================================

-- User Profiles (extends Supabase auth.users)
CREATE TABLE profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email TEXT NOT NULL,
  full_name TEXT,
  avatar_url TEXT,
  phone TEXT,
  role user_role DEFAULT 'customer',
  city TEXT NOT NULL,
  interests TEXT[] DEFAULT '{}',
  is_driver BOOLEAN DEFAULT FALSE,
  driver_score INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Friend Relationships
CREATE TABLE friendships (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  requester_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  addressee_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'blocked')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(requester_id, addressee_id)
);

-- =============================================
-- BUSINESS TABLES
-- =============================================

-- Business Profiles
CREATE TABLE businesses (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  owner_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  category TEXT NOT NULL,
  subcategory TEXT,
  email TEXT,
  phone TEXT,
  website TEXT,
  address TEXT NOT NULL,
  city TEXT NOT NULL,
  location GEOGRAPHY(POINT, 4326),
  business_hours JSONB, -- {day: {open: "09:00", close: "21:00", closed: false}}
  holidays TEXT[], -- Array of holiday dates
  logo_url TEXT,
  cover_images TEXT[] DEFAULT '{}',
  status business_status DEFAULT 'pending',
  avg_rating DECIMAL(3,2) DEFAULT 0,
  total_reviews INTEGER DEFAULT 0,
  avg_ticket_size INTEGER,
  seasonal_patterns TEXT[], -- e.g., ['summer_busy', 'winter_slow']
  target_demographics JSONB, -- Age groups, interests, etc.
  verification_status TEXT DEFAULT 'unverified' CHECK (verification_status IN ('unverified', 'pending', 'verified')),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Business Products
CREATE TABLE products (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  price DECIMAL(10,2),
  category TEXT,
  images TEXT[] DEFAULT '{}',
  video_url TEXT,
  is_featured BOOLEAN DEFAULT FALSE,
  is_active BOOLEAN DEFAULT TRUE,
  display_order INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Business Offers
CREATE TABLE offers (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  description TEXT,
  terms_conditions TEXT,
  image_url TEXT,
  valid_from TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  valid_until TIMESTAMP WITH TIME ZONE,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- COUPON SYSTEM
-- =============================================

-- Coupon Batches (Generated by businesses)
CREATE TABLE coupon_batches (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
  offer_id UUID REFERENCES offers(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  quantity INTEGER NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Individual Coupons
CREATE TABLE coupons (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  batch_id UUID NOT NULL REFERENCES coupon_batches(id) ON DELETE CASCADE,
  business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
  coupon_code TEXT NOT NULL UNIQUE,
  qr_code TEXT, -- Base64 encoded QR code
  status coupon_status DEFAULT 'not_issued',
  issued_to UUID REFERENCES profiles(id) ON DELETE SET NULL,
  collected_by UUID REFERENCES profiles(id) ON DELETE SET NULL,
  issued_at TIMESTAMP WITH TIME ZONE,
  collected_at TIMESTAMP WITH TIME ZONE,
  expires_at TIMESTAMP WITH TIME ZONE,
  redeemed_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Coupon Sharing (with daily limits)
CREATE TABLE coupon_shares (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  coupon_id UUID NOT NULL REFERENCES coupons(id) ON DELETE CASCADE,
  sender_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  receiver_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  shared_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  accepted_at TIMESTAMP WITH TIME ZONE,
  status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'accepted', 'declined'))
);

-- =============================================
-- SOCIAL FEATURES
-- =============================================

-- User Reviews
CREATE TABLE reviews (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  rating INTEGER NOT NULL CHECK (rating IN (1, -1)), -- 1 = recommend, -1 = don't recommend
  comment TEXT CHECK (LENGTH(comment) <= 30), -- Max 30 words
  is_gps_verified BOOLEAN DEFAULT FALSE,
  is_redemption_verified BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(business_id, user_id) -- One review per user per business
);

-- User Activity Feed
CREATE TABLE activities (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  activity_type TEXT NOT NULL, -- 'check_in', 'review', 'coupon_collect', 'share'
  entity_type TEXT NOT NULL, -- 'business', 'product', 'coupon', 'offer'
  entity_id UUID NOT NULL,
  metadata JSONB, -- Additional activity data
  is_visible BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User Favorites
CREATE TABLE favorites (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  entity_type TEXT NOT NULL CHECK (entity_type IN ('business', 'product', 'coupon')),
  entity_id UUID NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, entity_type, entity_id)
);

-- User Wishlist
CREATE TABLE wishlist_items (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  item_name TEXT NOT NULL,
  description TEXT,
  estimated_price DECIMAL(10,2),
  category TEXT,
  business_id UUID REFERENCES businesses(id) ON DELETE SET NULL,
  product_id UUID REFERENCES products(id) ON DELETE SET NULL,
  is_fulfilled BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- GPS Check-ins
CREATE TABLE checkins (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
  location GEOGRAPHY(POINT, 4326),
  is_verified BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- ADVERTISING & MONETIZATION
-- =============================================

-- Ad Campaigns
CREATE TABLE ad_campaigns (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
  ad_type ad_type NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  target_demographics JSONB, -- Age, interests, location
  target_drivers_only BOOLEAN DEFAULT FALSE,
  budget_daily DECIMAL(10,2),
  start_date TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  end_date TIMESTAMP WITH TIME ZONE,
  status ad_status DEFAULT 'pending',
  total_spent DECIMAL(10,2) DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Billing and Payments
CREATE TABLE billing_accounts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
  current_balance DECIMAL(10,2) DEFAULT 0, -- Negative = owe money
  credit_balance DECIMAL(10,2) DEFAULT 0,
  last_billed_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Billing Transactions
CREATE TABLE billing_transactions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  business_id UUID NOT NULL REFERENCES businesses(id) ON DELETE CASCADE,
  transaction_type TEXT NOT NULL CHECK (transaction_type IN ('charge', 'payment', 'credit', 'dispute')),
  amount DECIMAL(10,2) NOT NULL,
  description TEXT,
  reference_id UUID, -- Links to ad_campaigns, coupon_batches, etc.
  reference_type TEXT, -- 'ad_campaign', 'coupon_generation', etc.
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- PRICING & PROMOTIONS
-- =============================================

-- Pricing Configuration
CREATE TABLE pricing_config (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  version INTEGER NOT NULL,
  config JSONB NOT NULL, -- {coupon_unit: 2, banner_daily: 500, search_daily: 500, trending_daily: 300}
  is_active BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(version)
);

-- Regional Price Overrides
CREATE TABLE pricing_overrides (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  pricing_version INTEGER NOT NULL,
  region TEXT, -- 'city:Hyderabad', 'state:Telangana'
  tier TEXT, -- 'premium', 'standard', 'basic'
  overrides JSONB NOT NULL, -- Same structure as pricing_config.config
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Promotional Rules
CREATE TABLE promotions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  description TEXT,
  scope TEXT NOT NULL, -- 'global', 'city', 'state', 'tier'
  scope_value TEXT, -- 'Hyderabad', 'premium', etc.
  promotion_type TEXT NOT NULL CHECK (promotion_type IN ('percentage', 'fixed_amount', 'bundle')),
  value DECIMAL(5,2), -- Percentage (0-100) or fixed amount
  conditions JSONB, -- {first_week: true, min_spend: 1000}
  valid_from TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  valid_until TIMESTAMP WITH TIME ZONE,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =============================================
-- NOTIFICATIONS & COMMUNICATIONS
-- =============================================

-- User Notifications
CREATE TABLE notifications (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES profiles(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  message TEXT NOT NULL,
  notification_type notification_type NOT NULL,
  route_to TEXT, -- Deep link route
  entity_id UUID, -- ID of related entity
  is_read BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- System-wide sharing limits configuration
CREATE TABLE sharing_limits (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  limit_type TEXT NOT NULL CHECK (limit_type IN ('per_friend_daily', 'total_daily')),
  limit_value INTEGER NOT NULL,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Driver Algorithm Configuration
CREATE TABLE driver_config (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  version INTEGER NOT NULL,
  config JSONB NOT NULL, -- {check_in_weight: 10, review_weight: 15, coupon_share_weight: 5}
  is_active BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(version)
);

-- =============================================
-- INDEXES FOR PERFORMANCE
-- =============================================

-- User and profile indexes
CREATE INDEX idx_profiles_city ON profiles(city);
CREATE INDEX idx_profiles_role ON profiles(role);
CREATE INDEX idx_profiles_is_driver ON profiles(is_driver);

-- Business indexes
CREATE INDEX idx_businesses_city ON businesses(city);
CREATE INDEX idx_businesses_category ON businesses(category);
CREATE INDEX idx_businesses_status ON businesses(status);
CREATE INDEX idx_businesses_location ON businesses USING GIST(location);

-- Product indexes
CREATE INDEX idx_products_business_id ON products(business_id);
CREATE INDEX idx_products_is_featured ON products(is_featured);
CREATE INDEX idx_products_is_active ON products(is_active);

-- Coupon indexes
CREATE INDEX idx_coupons_status ON coupons(status);
CREATE INDEX idx_coupons_business_id ON coupons(business_id);
CREATE INDEX idx_coupons_collected_by ON coupons(collected_by);
CREATE INDEX idx_coupons_expires_at ON coupons(expires_at);

-- Social indexes
CREATE INDEX idx_reviews_business_id ON reviews(business_id);
CREATE INDEX idx_reviews_user_id ON reviews(user_id);
CREATE INDEX idx_activities_user_id ON activities(user_id);
CREATE INDEX idx_activities_created_at ON activities(created_at DESC);
CREATE INDEX idx_favorites_user_id ON favorites(user_id);
CREATE INDEX idx_checkins_user_id ON checkins(user_id);
CREATE INDEX idx_checkins_business_id ON checkins(business_id);

-- Notification indexes
CREATE INDEX idx_notifications_user_id ON notifications(user_id);
CREATE INDEX idx_notifications_is_read ON notifications(is_read);
CREATE INDEX idx_notifications_created_at ON notifications(created_at DESC);

-- =============================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- =============================================

-- Enable RLS on all tables
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE friendships ENABLE ROW LEVEL SECURITY;
ALTER TABLE businesses ENABLE ROW LEVEL SECURITY;
ALTER TABLE products ENABLE ROW LEVEL SECURITY;
ALTER TABLE offers ENABLE ROW LEVEL SECURITY;
ALTER TABLE coupon_batches ENABLE ROW LEVEL SECURITY;
ALTER TABLE coupons ENABLE ROW LEVEL SECURITY;
ALTER TABLE coupon_shares ENABLE ROW LEVEL SECURITY;
ALTER TABLE reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE activities ENABLE ROW LEVEL SECURITY;
ALTER TABLE favorites ENABLE ROW LEVEL SECURITY;
ALTER TABLE wishlist_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE checkins ENABLE ROW LEVEL SECURITY;
ALTER TABLE ad_campaigns ENABLE ROW LEVEL SECURITY;
ALTER TABLE billing_accounts ENABLE ROW LEVEL SECURITY;
ALTER TABLE billing_transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;

-- Profile policies
CREATE POLICY "Users can view all profiles" ON profiles FOR SELECT USING (true);
CREATE POLICY "Users can update own profile" ON profiles FOR UPDATE USING (auth.uid() = id);

-- Business policies
CREATE POLICY "Anyone can view active businesses" ON businesses FOR SELECT USING (status = 'active');
CREATE POLICY "Business owners can manage their businesses" ON businesses FOR ALL USING (auth.uid() = owner_id);

-- Product policies
CREATE POLICY "Anyone can view active products" ON products FOR SELECT USING (is_active = true);
CREATE POLICY "Business owners can manage their products" ON products FOR ALL USING (
  auth.uid() IN (SELECT owner_id FROM businesses WHERE id = products.business_id)
);

-- Coupon policies
CREATE POLICY "Users can view their collected coupons" ON coupons FOR SELECT USING (
  collected_by = auth.uid() OR auth.uid() IN (SELECT owner_id FROM businesses WHERE id = coupons.business_id)
);

-- Review policies
CREATE POLICY "Anyone can view reviews" ON reviews FOR SELECT USING (true);
CREATE POLICY "Users can manage their own reviews" ON reviews FOR ALL USING (auth.uid() = user_id);

-- Activity policies
CREATE POLICY "Users can view friend activities" ON activities FOR SELECT USING (
  user_id = auth.uid() OR 
  user_id IN (
    SELECT CASE 
      WHEN requester_id = auth.uid() THEN addressee_id 
      ELSE requester_id 
    END 
    FROM friendships 
    WHERE status = 'accepted' AND (requester_id = auth.uid() OR addressee_id = auth.uid())
  )
);

-- Notification policies
CREATE POLICY "Users can view their own notifications" ON notifications FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can update their own notifications" ON notifications FOR UPDATE USING (auth.uid() = user_id);

-- =============================================
-- FUNCTIONS AND TRIGGERS
-- =============================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Add updated_at triggers to relevant tables
CREATE TRIGGER update_profiles_updated_at BEFORE UPDATE ON profiles FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_businesses_updated_at BEFORE UPDATE ON businesses FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_reviews_updated_at BEFORE UPDATE ON reviews FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to calculate business average rating
CREATE OR REPLACE FUNCTION update_business_rating()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE businesses 
    SET 
        avg_rating = (
            SELECT AVG(CASE WHEN rating = 1 THEN 5.0 ELSE 1.0 END) 
            FROM reviews 
            WHERE business_id = NEW.business_id
        ),
        total_reviews = (
            SELECT COUNT(*) 
            FROM reviews 
            WHERE business_id = NEW.business_id
        )
    WHERE id = NEW.business_id;
    
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to update business rating when reviews change
CREATE TRIGGER update_business_rating_trigger 
    AFTER INSERT OR UPDATE OR DELETE ON reviews 
    FOR EACH ROW 
    EXECUTE FUNCTION update_business_rating();

-- Function to check daily sharing limits
CREATE OR REPLACE FUNCTION check_sharing_limits(sender_id UUID, receiver_id UUID)
RETURNS BOOLEAN AS $$
DECLARE
    per_friend_limit INTEGER;
    total_daily_limit INTEGER;
    friend_shares_today INTEGER;
    total_shares_today INTEGER;
BEGIN
    -- Get current limits
    SELECT limit_value INTO per_friend_limit FROM sharing_limits WHERE limit_type = 'per_friend_daily' AND is_active = true;
    SELECT limit_value INTO total_daily_limit FROM sharing_limits WHERE limit_type = 'total_daily' AND is_active = true;
    
    -- Default limits if not configured
    IF per_friend_limit IS NULL THEN per_friend_limit := 3; END IF;
    IF total_daily_limit IS NULL THEN total_daily_limit := 20; END IF;
    
    -- Count shares to this friend today
    SELECT COUNT(*) INTO friend_shares_today 
    FROM coupon_shares 
    WHERE sender_id = sender_id 
      AND receiver_id = receiver_id 
      AND shared_at >= CURRENT_DATE;
    
    -- Count total shares today
    SELECT COUNT(*) INTO total_shares_today 
    FROM coupon_shares 
    WHERE sender_id = sender_id 
      AND shared_at >= CURRENT_DATE;
    
    RETURN friend_shares_today < per_friend_limit AND total_shares_today < total_daily_limit;
END;
$$ language 'plpgsql';

-- =============================================
-- INITIAL DATA
-- =============================================

-- Insert default sharing limits
INSERT INTO sharing_limits (limit_type, limit_value, is_active) VALUES 
('per_friend_daily', 3, true),
('total_daily', 20, true);

-- Insert initial pricing config
INSERT INTO pricing_config (version, config, is_active) VALUES (
    1, 
    '{"coupon_unit": 2, "banner_daily": 500, "search_daily": 500, "trending_daily": 300}',
    true
);

-- Insert initial driver algorithm config
INSERT INTO driver_config (version, config, is_active) VALUES (
    1,
    '{"check_in_weight": 10, "review_weight": 15, "coupon_share_weight": 5, "activity_weight": 3}',
    true
);

-- Sample cities (can be expanded)
-- Note: In a real app, you'd have a comprehensive cities table
COMMENT ON TABLE profiles IS 'User profiles extending Supabase auth.users';
COMMENT ON TABLE businesses IS 'Business profiles with enhanced onboarding data';
COMMENT ON TABLE coupons IS 'Individual coupons with full lifecycle tracking';
COMMENT ON TABLE sharing_limits IS 'Admin-configurable daily sharing limits';
COMMENT ON TABLE driver_config IS 'Configurable algorithm for identifying top drivers';

-- End of schema